
def calcular_media_tiempo_cambio_contrasena_por_usuario(cur):
   query = """
    SELECT DISTINCT usuarios.username, fecha, permisos
    FROM usuarios
    JOIN ipfecha ON usuarios.username = ipfecha.username
    ORDER BY usuarios.username, fecha
"""

cur.execute(query)
rows = cur.fetchall()

# Diccionario para almacenar las fechas ordenadas por usuario
fechas_por_usuario = {}

# Iterar sobre las filas y almacenar las fechas ordenadas por usuario
for row in rows:
    user, fecha_str, permiso = row
    fecha = datetime.strptime(fecha_str, "%d/%m/%Y")

    if user not in fechas_por_usuario:
        fechas_por_usuario[user] = []

    fechas_por_usuario[user].append((fecha, permiso))

# Diccionario para almacenar los tiempos de cambio de contraseña por permiso
tiempos_por_permiso = {}

# Iterar sobre las fechas por usuario y calcular los tiempos de cambio de contraseña
for user, fechas_permisos in fechas_por_usuario.items():
    fechas_permisos.sort()  # Ordenar las fechas

    for i in range(1, len(fechas_permisos)):
        fecha_anterior, permiso_anterior = fechas_permisos[i - 1]
        fecha_actual, permiso_actual = fechas_permisos[i]

        # Verificar si es el mismo permiso
        if permiso_actual == permiso_anterior:
            # Calcular la diferencia de tiempo entre fechas consecutivas
            tiempo_cambio = fecha_actual - fecha_anterior

            # Agregar el tiempo de cambio a la lista correspondiente
            if permiso_actual not in tiempos_por_permiso:
                tiempos_por_permiso[permiso_actual] = []

            tiempos_por_permiso[permiso_actual].append(tiempo_cambio.days)

# Calcular la media de los tiempos de cambio de contraseña por permiso
medias_por_permiso = {}
for permiso, tiempos in tiempos_por_permiso.items():
    media_tiempo = sum(tiempos) / len(tiempos)
    medias_por_permiso[permiso] = media_tiempo

# Imprimir la media de tiempo de cambio de contraseña por permiso
for permiso, media in medias_por_permiso.items():
    print(f"Media de tiempo de cambio de contraseña para permiso {permiso}: {media:.2f} días")


users,punt=calcular_puntuaciones_usuarios_criticos(cur)

def calcular_politicas_desactualizadas(cur): #que es desactualizada, menor a que año?
    cur.execute("""
        SELECT url, SUM(cookies + aviso + proteccionDatos) AS politicas_desactualizadas
        FROM legalData WHERE creacion<2017
        GROUP BY url
        ORDER BY politicas_desactualizadas DESC
        LIMIT 5
    """)
    resultados = cur.fetchall()
    paginas_web = [row[0] for row in resultados]
    politicas = [row[1] for row in resultados]
    print("paginas web", end="")
    print(paginas_web)
    print("politicas", end="")
    print(politicas) #en base al numero de politicas que tiene
    return paginas_web, politicas
pag,politicas=calcular_politicas_desactualizadas(cur)


def calcular_cumplimiento_politicas_por_anio(cur):
    cur.execute("""
        SELECT creacion AS anio, 
               SUM(CASE WHEN cookies = 1 AND aviso = 1 AND proteccionDatos = 1 THEN 1 ELSE 0 END) AS cumplen,
               SUM(CASE WHEN cookies <> 1 OR aviso <> 1 OR proteccionDatos <> 1 THEN 1 ELSE 0 END) AS no_cumplen
        FROM legalData
        GROUP BY anio
    """)
    resultados = cur.fetchall()
    anios = [row[0] for row in resultados]
    cumplen = [row[1] for row in resultados]
    no_cumplen = [row[2] for row in resultados]
    print("años", end="")
    print(anios)
    print("cumplen politicas", end="")
    print(cumplen)
    print("no cumplen todas las politicas", end="")
    print(no_cumplen)
    return anios, cumplen, no_cumplen

an,cum,no_cum=calcular_cumplimiento_politicas_por_anio(cur)
